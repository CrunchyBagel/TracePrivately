/*
See LICENSE folder for this sampleâ€™s licensing information.

Abstract:
Diagnosis Key File generated protobuf.
*/


// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: DeveloperDiagnosisKeyFileProtobuf.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct File {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: Header {
    get {return _header ?? Header()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  var key: [Key] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _header: Header? = nil
}

struct Header {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Time window of keys in this file based on arrival to server, in UTC.
  var startTimestamp: Int64 {
    get {return _startTimestamp ?? 0}
    set {_startTimestamp = newValue}
  }
  /// Returns true if `startTimestamp` has been explicitly set.
  var hasStartTimestamp: Bool {return self._startTimestamp != nil}
  /// Clears the value of `startTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearStartTimestamp() {self._startTimestamp = nil}

  var endTimestamp: Int64 {
    get {return _endTimestamp ?? 0}
    set {_endTimestamp = newValue}
  }
  /// Returns true if `endTimestamp` has been explicitly set.
  var hasEndTimestamp: Bool {return self._endTimestamp != nil}
  /// Clears the value of `endTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearEndTimestamp() {self._endTimestamp = nil}

  /// Region for which these keys came from (e.g., country)
  var region: String {
    get {return _region ?? String()}
    set {_region = newValue}
  }
  /// Returns true if `region` has been explicitly set.
  var hasRegion: Bool {return self._region != nil}
  /// Clears the value of `region`. Subsequent reads from it will return its default value.
  mutating func clearRegion() {self._region = nil}

  /// E.g., Batch 2 of 10
  var batchNum: Int32 {
    get {return _batchNum ?? 0}
    set {_batchNum = newValue}
  }
  /// Returns true if `batchNum` has been explicitly set.
  var hasBatchNum: Bool {return self._batchNum != nil}
  /// Clears the value of `batchNum`. Subsequent reads from it will return its default value.
  mutating func clearBatchNum() {self._batchNum = nil}

  var batchSize: Int32 {
    get {return _batchSize ?? 0}
    set {_batchSize = newValue}
  }
  /// Returns true if `batchSize` has been explicitly set.
  var hasBatchSize: Bool {return self._batchSize != nil}
  /// Clears the value of `batchSize`. Subsequent reads from it will return its default value.
  mutating func clearBatchSize() {self._batchSize = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startTimestamp: Int64? = nil
  fileprivate var _endTimestamp: Int64? = nil
  fileprivate var _region: String? = nil
  fileprivate var _batchNum: Int32? = nil
  fileprivate var _batchSize: Int32? = nil
}

struct Key {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Key of infected user
  var keyData: Data {
    get {return _keyData ?? SwiftProtobuf.Internal.emptyData}
    set {_keyData = newValue}
  }
  /// Returns true if `keyData` has been explicitly set.
  var hasKeyData: Bool {return self._keyData != nil}
  /// Clears the value of `keyData`. Subsequent reads from it will return its default value.
  mutating func clearKeyData() {self._keyData = nil}

  /// Interval number when the key's EKRollingPeriod started.
  var rollingStartNumber: UInt32 {
    get {return _rollingStartNumber ?? 0}
    set {_rollingStartNumber = newValue}
  }
  /// Returns true if `rollingStartNumber` has been explicitly set.
  var hasRollingStartNumber: Bool {return self._rollingStartNumber != nil}
  /// Clears the value of `rollingStartNumber`. Subsequent reads from it will return its default value.
  mutating func clearRollingStartNumber() {self._rollingStartNumber = nil}

  /// Number of 10-minute windows between key rolling.
  var rollingPeriod: UInt32 {
    get {return _rollingPeriod ?? 0}
    set {_rollingPeriod = newValue}
  }
  /// Returns true if `rollingPeriod` has been explicitly set.
  var hasRollingPeriod: Bool {return self._rollingPeriod != nil}
  /// Clears the value of `rollingPeriod`. Subsequent reads from it will return its default value.
  mutating func clearRollingPeriod() {self._rollingPeriod = nil}

  /// Risk of transmission associated with the person this key came from.
  var transmissionRiskLevel: Int32 {
    get {return _transmissionRiskLevel ?? 0}
    set {_transmissionRiskLevel = newValue}
  }
  /// Returns true if `transmissionRiskLevel` has been explicitly set.
  var hasTransmissionRiskLevel: Bool {return self._transmissionRiskLevel != nil}
  /// Clears the value of `transmissionRiskLevel`. Subsequent reads from it will return its default value.
  mutating func clearTransmissionRiskLevel() {self._transmissionRiskLevel = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _keyData: Data? = nil
  fileprivate var _rollingStartNumber: UInt32? = nil
  fileprivate var _rollingPeriod: UInt32? = nil
  fileprivate var _transmissionRiskLevel: Int32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension File: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "File"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.key)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.key, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: File, rhs: File) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Header: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Header"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "startTimestamp"),
    2: .same(proto: "endTimestamp"),
    3: .same(proto: "region"),
    4: .same(proto: "batchNum"),
    5: .same(proto: "batchSize"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self._startTimestamp)
      case 2: try decoder.decodeSingularInt64Field(value: &self._endTimestamp)
      case 3: try decoder.decodeSingularStringField(value: &self._region)
      case 4: try decoder.decodeSingularInt32Field(value: &self._batchNum)
      case 5: try decoder.decodeSingularInt32Field(value: &self._batchSize)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._startTimestamp {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._endTimestamp {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    }
    if let v = self._region {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._batchNum {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._batchSize {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Header, rhs: Header) -> Bool {
    if lhs._startTimestamp != rhs._startTimestamp {return false}
    if lhs._endTimestamp != rhs._endTimestamp {return false}
    if lhs._region != rhs._region {return false}
    if lhs._batchNum != rhs._batchNum {return false}
    if lhs._batchSize != rhs._batchSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Key: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Key"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "keyData"),
    2: .same(proto: "rollingStartNumber"),
    3: .same(proto: "rollingPeriod"),
    4: .same(proto: "transmissionRiskLevel"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._keyData)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._rollingStartNumber)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._rollingPeriod)
      case 4: try decoder.decodeSingularInt32Field(value: &self._transmissionRiskLevel)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._keyData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._rollingStartNumber {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._rollingPeriod {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._transmissionRiskLevel {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Key, rhs: Key) -> Bool {
    if lhs._keyData != rhs._keyData {return false}
    if lhs._rollingStartNumber != rhs._rollingStartNumber {return false}
    if lhs._rollingPeriod != rhs._rollingPeriod {return false}
    if lhs._transmissionRiskLevel != rhs._transmissionRiskLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
